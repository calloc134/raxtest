以下は、私の考えているテストツールだ。
まず、このテストツールで用いる構成ファイルをyaml形式にてあらわす。

baseUrl: http://XXX
data: json://data.json
init:
 - name loginStep
   path: api/login
   method: POST
   body: init

steps:
 - name: hogestep
   path: api/hoge
   method: GET
   expectStatus: 200
 - name: fugastep
   path: api/fuga/{id}
   method: GET
   query: fuga
   expect_status: 200
 - name: piyostep
   path: api/piyo
   method: POST
   body: piyo
   expectStatus: 200
 - name: higestep
   path: api/hige
   method: POST
   body: hige
   expectStatus: 200
   login: true

 
ここで、baseUrlはテスト対象のベースとなるサーバのホストです。
また、テストごとにステップと呼ばれる要素になっており、それらはシーケンスで複数列挙できるようになっている。
それらは
  name -> 名前
  path -> パス名。ただし、{baseUrl}/{path}としてアクセスされる
  method -> リクエストするときのHTTPメソッド
  expectStatus -> 予期するHTTPステータス。このステータスに一致していれば、テストが成功する
  query -> クエリパラメータ。仕様は後述
  body -> リクエストボディ.仕様は後述
  login -> ログインが必要な場合にtrueを指定する。これがtrueのときのログインの仕様は後述
で構成される。

また、stepsの処理が始まる前に、initという処理が実行される。
initはログイン処理など、テストの前に必ず実行される処理を記述するためのものである。
initのステップはシーケンスで複数列挙できるようになっている。
それらは
  name -> 名前
  path -> パス名。ただし、{baseUrl}/{path}としてアクセスされる
  method -> リクエストするときのHTTPメソッド
  body -> リクエストボディ.仕様は後述
で構成され、またここで得たレスポンスのクッキーを、後続のstepsのリクエストでlogin: trueが設定されているステップすべてに付与する。

次に、データとして読み込まれるjsonの構造を述べる。
{
    "init" {
        "body": {
            "username": "dummy",
            "password": "dummy"
        }
    },
    "fuga": {
        "param": {
            "id": 2
        }
    },
    "piyo": {
        "body": {
            "id": 1,
            "name": "piyo"
        }
    },
}

このjsonでは、データの名前をキーとして、そのデータを表すオブジェクトを値として持つ。
上記のリクエストボディでそのキーを指定すると、そのキーに属しているオブジェクトのbodyプロパティがそのままリクエストボディとして送信される。
また、上記のクエリパラメータでそのキーを指定すると、
仮にそのキーに属しているオブジェクトのparamの内部に存在するプロパティのキー名を"id"であるとして、pathの中の{id}がプロパティのバリュー名に置き換えられて、そのままクエリパラメータとして送信される。


では、これらを踏まえて、テストを行うようなツールをRustで書け。
ただし、利用するクレートは
 - serde_yaml
 - serde_json
 - reqwest
であり、複数のテストに関してはfor文で実行するようにせよ。
また、データ読み込みの部分については、データを必要とするステップの数が未知数であることを考慮して、jsonを連想配列の形に変換し、それを参照するようにせよ。

また、完成したコードを一行ごとに説明せよ。



私は、このyaml構成ファイルを読み込ませ、テストを行うようなツールをRustで書くことを目標にしている。
私はこれを実装するために以下のようなソースを書いた。
use reqwest::blocking::Client;
use reqwest::Method;
use serde::{Deserialize, Serialize};
use serde_yaml::from_reader;
use std::fs::File;

// ステップごとの設定を表す構造体
#[derive(Debug, Serialize, Deserialize)]
struct Step {
    name: String,
    path: String,
    method: String,
    expect_status: u16,
}

// 全体の設定を表す構造体
#[derive(Debug, Serialize, Deserialize)]
struct Config {
    base_url: String,
    steps: Vec<Step>,
}

// メイン関数
fn main() {
    // 設定ファイルを読み込む
    let file = File::open("config.yml").expect("failed to open file");
    let config: Config = from_reader(file).expect("failed to parse yaml");

    // HTTPクライアントを生成する
    let client = Client::new();

    // 全てのステップに対して、テストを実行する
    for step in config.steps {
        // テストするURLを生成する
        let url = format!("{}/{}", config.base_url, step.path);

        // メソッドに応じて、HTTPメソッドのenumを生成する
        let method = match step.method.as_str() {
            "GET" => Method::GET,
            "POST" => Method::POST,
            "PUT" => Method::PUT,
            "PATCH" => Method::PATCH,
            "DELETE" => Method::DELETE,
            _ => panic!("invalid method"),
        };

        // HTTPリクエストを送信する
        let res = client
            .request(method, &url)
            .send()
            .expect("failed to send request");

        // HTTPステータスを検証する
        assert_eq!(res.status().as_u16(), step.expect_status);
    }
}

ただし、利用するクレートは
 - serde_yaml
 - reqwest
であり、複数のテストに関してはfor文で実行するようにせよ。

また、完成したコードを一行ごとに説明せよ。


テスト後のjsonの仕様

{
    "host": "http://localhost:8080",
    "duration": 1000,
    "task_results": {
        [
            {
                "name": "name",
                "status": "success",
                "duration": 1000,
                "message": "success"
            },
            {
                "name": "name",
                "status": "success",
                "duration": 1000,
                "message": "success"
            },
        ]
    }
}