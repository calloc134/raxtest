こんにちは。calloc134です。情報工学を学ぶ学生です。
突然ですが皆さん、APIのテストをどのように行っていますか？
APIのテストの使われるツールといえば、postmanやdredd等がありますね。

さて、自分もAPIのテストを行いたいと思い、これらのツールを試行錯誤していましたが、どうも自分のやりたいこととズレているようでした。
そこで考えました。

 - openapiスキーマからテストをある程度生成できる(example値も参照する)
 - ログインしてクッキーを付与しながらテストを行える
 - 非同期でリクエストを行い、高速に実行できる
 - 結果をjsonで出力し、CI/CDに組み込みやすい
 というテストツールがあればいいのに、と思いました。

 そこで、自分で作ってみました！
誕生したのが、"raxtest" & "openapi2raxtest" という二つのOSSです。
openapi2raxtestでは、openapiスキーマからテスト定義ファイルを生成します。
raxtestでは、テスト定義ファイルを読み込み、テストを実行します。
では、これらの使い方を解説します。

## 使い方の例
raxtestのテスト定義ファイルの書き方を説明します。
ざっくりこんな感じです。

```yaml 
base_url: http://localhost
data: json://data.json
init:
  - name: loginStep
    path: api/auth/login
    method: POST
    body: init

steps:
  - name: apiall
    path: api/profile/all
    method: GET
    expect_status: 200

  - name: apiProfileUsername
    path: api/profile/@{name}
    method: GET
    query: ProfileUsername
    expect_status: 200

  - name: isLogin
    path: api/profile/me
    method: GET
    login: loginStep
    expect_status: 200

  - name: PostNewArticle
    path: api/post/new
    method: POST
    body: Article
    expect_status: 200
    login: loginStep
```

ここで、`query`や`body`などのタグには、`data.json`で定義したデータを参照することができるようになっています。
また、`login`オプションでは、initの中に含まれているステップでのクッキー情報を参照することができます。

上述のとおり、このbodyやqueryなどのタグに対応するデータを、data.jsonで定義することができます。
```json
{
    "init": {
        "body": {
            "screenName": "johndoe",
            "password": "Password"
        }
    },
    "ProfileUsername": {
        "query": {
            "name": "johndoe"
        }
    },
    "Article": {
        "body": {
            "title": "テスト",
            "body": "テストで投稿した記事です。"
        }
    }
}
```

そして、以下のコマンドでテストを実行できます。
```bash
$ raxtest -i raxtest.yml -o output.json
```

`-i`オプションでインプットファイルを指定し、`-o`オプションで出力ファイルを指定します。
テストは並列でリクエストが送信されるので、大量にテストがあっても爆速で実行できます！

テストが終わると、output.jsonに出力されます。
```json
{
  "base_url": "http://localhost",
  "results": [
    {
      "name": "apiall",
      "status": "success",
      "duration": 0.000048,
      "message": "passed"
    },
    {
      "name": "apiProfileUsername",
      "status": "success",
      "duration": 0.0113897,
      "message": "passed"
    },
    {
      "name": "isLogin",
      "status": "success",
      "duration": 0.0034016,
      "message": "passed"
    },
    {
      "name": "PostNewArticle",
      "status": "failure",
      "duration": 0.0000487,
      "message": "failed (status: 400 Bad Request, expect status: 200)"
    }
  ]
}
```

このようにして、テストの名前や成功の可否、所要時間などが出力されます。
json形式で出力されるため、CI/CDに非常に組み込みやすくなっています。

## openapiスキーマよりテストを生成
テストの定義ファイルを書くのが面倒な人は、openapi2raxtestを使うと、OpenAPIの定義ファイルからテスト定義ファイルを生成できます。
```bash
$ openapi2raxtest -i openapi.yaml -o raxtest.yaml -d data.json -s http://localhost:8080
```

`-i`オプションでopenapiスキーマファイルを、`-d`オプションで出力する先のデータファイルのパスを、`-s`オプションでテストを実行するサーバのURLを指定します。
ただ、ログインするかのオプションやテストデータの生成などは、手動で書く必要があります。

raxtestとopenapi2raxtestの詳しい使い方は、GithubのREADMEをご覧ください。

## 注意事項
動作確認はローカルで行いましたが、バグが含まれている可能性があります。
バグを見つけた場合は暖かい目で、イシューで知らせてもらうか、プルリクエストを送ってもらえると嬉しいです。



このツールを気に入っていただけたら、スターをよろしくお願いします！
また、バグなどがあれば、是非イシューやプルリクエストを送ってください！
https://github.com/calloc134/raxtest
https://github.com/calloc134/openapi2raxtest

それでは、良いAPIテストを！